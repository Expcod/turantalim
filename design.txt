A‚Äôlo ‚Äî juda aniq va amaliy talablaring bor. Quyida men sen so‚Äòragan ‚Äúadmin dashboard‚Äù uchun to‚Äòliq UI/UX va texnik yo‚Äòl-xaritasini ‚Äî interfeys maketlari, komponentlar, ma‚Äôlumot modeli, kerakli API endpointlar, fayl saqlash va audio/player talablari, xavfsizlik va notifikatsiya oqimlari bilan birga ‚Äî bir martalik, ishlashga tayyor tavsiyalar shaklida beraman. Sen hozircha bu yechimni vaqtinchalik ishlatmoqchisiz, shuning uchun oddiy, ishonchli va tez yo‚Äòl tanlangan.

Men hammasini O ªzbek tilida to‚Äòliq tushuntirdim ‚Äî hoziroq boshlaymiz üëá

# 1) Dashbord ‚Äî asosiy UX/layaut (ko‚Äòrinish va oqim)

Umumiy: adminga maxsus kirish, bosh sahifa ‚Äî ‚ÄúPending exams‚Äù ro‚Äòyxati. Har bir qator: foydalanuvchi ismi/familiyasi, imtihon nomi, level (Cefr 1 / TYS / multilevel), sanasi, status (Pending / In review / Reviewed), harakatlar (Open).

## A ‚Äî Bosh sahifa: ‚ÄúNew Submissions‚Äù

* Filtrlar (yuqorida):

  * Imtihon turi (tys, CEFR1, ...) ‚Äî dropdown
  * Section (Writing, Speaking) ‚Äî chekbox (faqat ko‚Äòrsatish)
  * Sana oralig‚Äòi
  * Qidiruv: ism/familiya/phone
  * Status: Pending / Reviewing / Checked
* Ro ªyxat (table):

  * Checkbox (bulk action)
  * Ism, Familiya (clickable)
  * Imtihon nomi (clickable)
  * Level
  * Date
  * Section(s) (Writing, Speaking ‚Äî text)
  * Status (badge)
  * ‚ÄúOpen‚Äù tugmasi

## B ‚Äî Individual submission sahifasi (Exam detail)

Sahifa 2 ustunli bo‚Äòlsin:

* Chap ustun (70% width): javoblarni ko‚Äòrsatadi.
* O‚Äòng ustun (30%): baholash paneli (score inputs, save button), audit log, action buttons.

### Chap ustun mazmuni:

* Top: Foydalanuvchi info (ism, email/phone, profil link)
* Keyin: ‚ÄúExam: <name> | Level: <level> | Date: <date>‚Äù
* Tabs: 4 ta tab (Listening, Reading, Writing, Speaking) ‚Äî Listening va Reading read-only (bot tomonidan berilgan ballar ko‚Äòrinadi). Writing va Speaking editable baholash.
* Har bir tab ichida:

  * Savollar ro‚Äòyxati (Question 1, Question 2, va h.k.)
  * Har bir savol uchun:

    * Writing: image gallery (rasmlar) ‚Äî har bir rasm yirik prevyu; rasm ostida `image_id` ko‚Äòrsin; rasm bosilganida lightbox (zoom).
    * Speaking: audio list ‚Äî har bir audio uchun audio player (Play / Pause / Stop / Seek, duration, download link).
    * Agar kerak bo‚Äòlsa javob matni (agar writing text also possible).

### O‚Äòng ustun ‚Äî Baholash paneli:

* Top: Section nomi (Writing / Speaking)
* Individual question scoring area (agar imtihon savollari 2 ta bo‚Äòlsa):

  * For each question:

    * Score input (0‚Äì100) yoki 0‚Äì10 (sen qaysi scale ishlatsang)
    * Comment textarea (optional)
* Global score (autocalc or manual): total / average
* Save as Draft / Submit buttons
* Reviewer info: `Reviewed by: <teacher name>` (auto-filled on submit)
* Audit log (past actions: who, when, old score -> new score)
* Notify student toggle (checkbox, default ON)

# 2) Wireframe / Quick mock (markdown)

> Bosh sahifa:
> `[Filter Panel]`
> `| Checkbox | Ism Fam | Imtihon | Level | Date | Sections | Status | Open |`

> Submission page:
> Left:

```
[User card]
[TABS: Listening | Reading | Writing | Speaking]

-- Writing Tab --
Q1:
  - Image 1 (thumb)  Image 2 (thumb)  Image 3 (thumb)
Q2:
  - Image 1  Image 2
```

Right:

```
[Section: Writing]
Q1 score: [  0-100  ]  Comment: [........]
Q2 score: [  0-100  ]  Comment: [........]
Total: [  85  ]   [Save draft] [Submit]
Reviewer: Me (auto)
[Audit log]
```

# 3) Ma‚Äôlumotlar modeli (Django ORM misoli)

Quyidagi modellashish chalkashmaslik va izchillik uchun tavsiya qilinadi.

```python
# exams/models.py
from django.db import models
from django.conf import settings

class Exam(models.Model):
    name = models.CharField(max_length=200)
    level = models.CharField(max_length=50)  # e.g., "CEFR1", "tys"
    date = models.DateTimeField()
    # other fields...

class Submission(models.Model):
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    exam = models.ForeignKey(Exam, on_delete=models.CASCADE)
    created_at = models.DateTimeField(auto_now_add=True)
    # overall status for writing/speaking review
    writing_status = models.CharField(max_length=20, default='pending')  # pending, reviewing, checked
    speaking_status = models.CharField(max_length=20, default='pending')
    writing_score = models.FloatField(null=True, blank=True)   # final saved score
    speaking_score = models.FloatField(null=True, blank=True)
    # who reviewed
    writing_reviewer = models.ForeignKey(settings.AUTH_USER_MODEL, null=True, blank=True, related_name='writing_reviewed', on_delete=models.SET_NULL)
    speaking_reviewer = models.ForeignKey(settings.AUTH_USER_MODEL, null=True, blank=True, related_name='speaking_reviewed', on_delete=models.SET_NULL)
    writing_reviewed_at = models.DateTimeField(null=True, blank=True)
    speaking_reviewed_at = models.DateTimeField(null=True, blank=True)

class QuestionMedia(models.Model):
    """
    Stores media (images or audio) for a specific submission question.
    Important: includes question_number to avoid mixing files between questions.
    """
    submission = models.ForeignKey(Submission, on_delete=models.CASCADE, related_name='media')
    section = models.CharField(max_length=20, choices=(('writing','writing'),('speaking','speaking')))
    question_number = models.PositiveSmallIntegerField()  # 1,2,...
    file = models.FileField(upload_to='submissions/%Y/%m/%d/')
    uploaded_at = models.DateTimeField(auto_now_add=True)
    # mime type or is_audio flag can help in frontend

class ReviewLog(models.Model):
    submission = models.ForeignKey(Submission, on_delete=models.CASCADE, related_name='logs')
    reviewer = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True)
    section = models.CharField(max_length=20)
    question_number = models.PositiveSmallIntegerField(null=True, blank=True)
    old_score = models.FloatField(null=True, blank=True)
    new_score = models.FloatField(null=True, blank=True)
    comment = models.TextField(blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
```

**Izoh:** `QuestionMedia` ichida `section` va `question_number` bo‚Äòlishi rasm/aydoni to‚Äòg‚Äòri savol bilan bog‚Äòlashga yordam beradi va 1-savoldagi rasm bilan 2-savoldagi rasm aralashmasligini kafolatlaydi.

# 4) Kerakli API endpointlar (Django REST Framework)

* `GET /api/admin/submissions/?status=writing_pending` ‚Äî pending submissions list (paginated)
* `GET /api/admin/submissions/{submission_id}/` ‚Äî full submission details + media list grouped by section & question_number
* `PATCH /api/admin/submissions/{submission_id}/writing/` ‚Äî update writing scores and reviewer info (payload: per-question scores, comments, total)
* `PATCH /api/admin/submissions/{submission_id}/speaking/` ‚Äî update speaking scores
* `POST /api/admin/submissions/{submission_id}/logs/` ‚Äî optional, create review log (or logs created server-side)
* `GET /api/admin/submissions/{submission_id}/media/` ‚Äî list media files, with URLs (signed if needed)

Payload example for PATCH:

```json
{
  "question_scores": {
    "1": {"score": 85, "comment": "Good idea but grammar mistakes."},
    "2": {"score": 90, "comment": "Clear structure."}
  },
  "total_score": 87.5,
  "notified": true
}
```

# 5) Frontend (UI) texnik jihatlar ‚Äî komponentlar

Tavsiya: React + Tailwind (yoki Django admin + custom templates agar tezroq bo‚Äòlishi kerak bo‚Äòlsa). Men havola qilib React komponentlarini taklif qilaman, chunki ular interaktiv audio player va image lightbox uchun qulay.

## Komponentlar

* `SubmissionsList` ‚Äî filterable table
* `SubmissionDetail` ‚Äî parent component with Tabs
* `MediaGallery` ‚Äî image grid per question (ensure correct mapping by question_number)
* `AudioList` ‚Äî audio items with HTML5 player
* `ScorePanel` ‚Äî inputs for per-question scores and Save/Submit
* `AuditLog` ‚Äî show logs
* `ConfirmModal` ‚Äî for submit confirmation

## Audio player

* Use native HTML5 `<audio>` element; show controls: Play / Pause / Stop / Seek.
* Problem: multiple audios on page; ensure only one plays at a time:

  * Use a simple JS utility: when starting playback on one audio, pause all others.
* Visual design: show waveform optionally (later) using WaveSurfer if needed.

Minimal JS for one-at-a-time:

```js
const audios = document.querySelectorAll('audio');
audios.forEach(a => {
  a.addEventListener('play', () => {
    audios.forEach(x => { if (x !== a) x.pause(); });
  });
});
```

# 6) Fayllarni aralashtirib yubormaslik (image-question mapping)

**Qoidalar:**

* Har bir uploaded file DBda `submission_id`, `section`, `question_number` bilan saqlansin.
* Storage path masalan: `submissions/{submission_id}/{section}/q{question_number}/{filename}`
* Frontendda mediani render qilishda GROUP BY `question_number`.
* Yuklash tarafida ham client yoki backend `question_number`ni yuborishi shart. (Agar yaratilgan bo‚Äòlsa, backendning upload endpointi `question_number`ni qabul qilsin.)

# 7) Baholash, saqlash va foydalanuvchini ogohlantirish

* Teacher sahifada `Save draft` ‚Äî local save (writing_score_x but not final), `Submit` ‚Äî final review: sets `writing_status='checked'`, sets `writing_reviewer` va `writing_reviewed_at`, creates `ReviewLog` entries.
* API endpoint `PATCH` orqali qabul qilingach, backend:

  * saqlaydi ballni,
  * hisoblangan overall exam result sifatida saqlashi kerak (agar total exam score dependent bo‚Äòlsa),
  * yuboradi notifikatsiya (telegram/email/push) ‚Äî men tavsiya qilam: **Telegram** va sayt profilinga push via websocket or notification table.
* Notifikatsiya text misol:

  * `Salom <Ism>, sizning <Imtihon nomi> imtihoningiz uchun Writing bo‚Äòlimi tekshirildi. Ball: 85. Feedback: "..."` + link to profile.

# 8) Xavfsizlik & ruxsat

* Ushbu admin dashboard faqat `is_staff` yoki `group='exam_reviewers'` bo‚Äòlgan foydalanuvchilarga ko‚Äòrsatiladi.
* API: token-based auth (e.g., JWT yoki DRF Token) + HTTPS.
* Media URL‚Äôlarini public qilmaslik: agar media sensitive bo‚Äòlsa, foydalanish uchun short-lived signed URLs yoki restrict to authenticated users.
* Audit log har bir o‚Äòzgartirishni yozib boradi (kim, qachon, eski ball).

# 9) Qo‚Äòshimcha amaliy maslahatlar (tez inki≈üaf uchun)

* Tez start: Django admin‚Äôni customizatsiyalab boshlash ‚Äî agar frontendni to‚Äòliq React qilmoqchi bo‚Äòlmasang, Django admin bo‚Äòyicha custom ModelAdmin shaklida ham juda tez ishlaydi. Lekin React/modern UI ergonomikroq.
* File storage: boshlanishda local storage ok, keyin S3/MinIO ga o‚Äòtkazish oson.
* Audio streaming: static file server orqali yetkazish etarli (Nginx).
* Background tasks: notifikatsiyalar va media processing (agar kerak bo‚Äòlsa) uchun Celery/RQ.

# 10) Tez boshlash uchun konkret kod namunasi (Django DRF view: update writing)

```python
# exams/api.py (DRF view)
from rest_framework.decorators import api_view, permission_classes
from rest_framework.permissions import IsAdminUser
from rest_framework.response import Response
from rest_framework import status
from .models import Submission, ReviewLog
from django.utils import timezone

@api_view(['PATCH'])
@permission_classes([IsAdminUser])
def update_writing(request, submission_id):
    """
    payload:
    {
      "question_scores": {"1": {"score": 85, "comment": "..."}, "2": {...}},
      "total_score": 87.5,
      "notified": true
    }
    """
    data = request.data
    sub = Submission.objects.get(pk=submission_id)

    old = sub.writing_score
    sub.writing_score = data.get('total_score')
    sub.writing_status = 'checked'
    sub.writing_reviewer = request.user
    sub.writing_reviewed_at = timezone.now()
    sub.save()

    # create logs per question
    for qnum, qdata in data.get('question_scores', {}).items():
        ReviewLog.objects.create(
            submission=sub,
            reviewer=request.user,
            section='writing',
            question_number=int(qnum),
            old_score=None,  # optional: fetch previous per-question if stored
            new_score=qdata.get('score'),
            comment=qdata.get('comment','')
        )

    # notify user if requested
    if data.get('notified', True):
        # implement notification: send_telegram or send_email
        pass

    return Response({"detail":"ok"}, status=status.HTTP_200_OK)
```

# 11) Checklist ‚Äî nimani hoziroq qilish kerak (prioritet)

1. DB modelini qo‚Äòshish / migrate (Submission, QuestionMedia, ReviewLog).
2. Media upload endpoint (agar mavjud bo‚Äòlmasa) ‚Äî yoki mavjud uploadni kengaytirish, `question_number` required.
3. Admin-only submissions list API.
4. Submission detail API returns media grouped by `question_number`.
5. Frontend page: SubmissionsList + SubmissionDetail minimal (image grid + audio tag + scoring panel).
6. Save/Submit flow + notifications.
7. Audit log va ruxsatlar tekshiruvi.
8. Test: 1-2 sample submissions va real o‚Äòqituvchilar bilan user acceptance test.

# 12) Dizayn (UI) uslubi ‚Äî qisqacha

* Palitra: sayting bilan mos (to‚Äòq ko‚Äòk / och ko‚Äòk), fon ‚Äî oq, kartalar ‚Äî yumaloq burchakli, yengil soyalar.
* Typografiya: Clear headings (h3), small muted meta text (date, level).
* Buttons: Primary (Save/Submit), secondary (Save draft), danger (Re-open).
* Responsive: mobil ham ishlashi kerak (o‚Äòqituvchilar mobil qurilmada ham baholashi mumkin).

# 13) Keyingi qadamlar ‚Äî men nima qilib berishim mumkin hozircha

