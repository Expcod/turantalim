# Frontend Developer Qo'llanmasi

## 1. Test Time Management

### Vaqt Chegarasi Tizimi

#### 1.1 Vaqt Ma'lumotlarini Olish
```javascript
// Test vaqti ma'lumotlarini olish
async function getTestTimeInfo(testResultId) {
    try {
        const response = await fetch(`/api/multilevel/test/time-info/?test_result_id=${testResultId}`, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        });
        
        const data = await response.json();
        
        if (response.ok) {
            return {
                testResultId: data.test_result_id,
                sectionTitle: data.section_title,
                sectionType: data.section_type,
                startTime: data.start_time,
                endTime: data.end_time,
                durationMinutes: data.duration_minutes,
                remainingMinutes: data.remaining_minutes,
                remainingSeconds: data.remaining_seconds,
                isExpired: data.is_expired,
                status: data.status
            };
        } else {
            throw new Error(data.error);
        }
    } catch (error) {
        console.error('Vaqt ma\'lumotlarini olishda xatolik:', error);
        throw error;
    }
}
```

#### 1.2 Vaqt Timer Komponenti
```javascript
// React komponenti
function TestTimer({ testResultId }) {
    const [timeInfo, setTimeInfo] = useState(null);
    const [timeLeft, setTimeLeft] = useState({ minutes: 0, seconds: 0 });
    const [isExpired, setIsExpired] = useState(false);

    useEffect(() => {
        // Dastlabki vaqt ma'lumotlarini olish
        loadTimeInfo();
        
        // Har soniyada vaqtni yangilash
        const timer = setInterval(() => {
            updateTime();
        }, 1000);

        return () => clearInterval(timer);
    }, [testResultId]);

    const loadTimeInfo = async () => {
        try {
            const info = await getTestTimeInfo(testResultId);
            setTimeInfo(info);
            
            if (info.isExpired) {
                setIsExpired(true);
                // Test tugagan, natijani ko'rsatish
                showTestResult();
            } else {
                setTimeLeft({
                    minutes: info.remainingMinutes,
                    seconds: info.remainingSeconds
                });
            }
        } catch (error) {
            console.error('Vaqt ma\'lumotlarini yuklashda xatolik:', error);
        }
    };

    const updateTime = () => {
        if (timeInfo && !isExpired) {
            const now = new Date();
            const endTime = new Date(timeInfo.endTime);
            const diff = endTime - now;

            if (diff <= 0) {
                setIsExpired(true);
                showTestResult();
            } else {
                const minutes = Math.floor(diff / 60000);
                const seconds = Math.floor((diff % 60000) / 1000);
                setTimeLeft({ minutes, seconds });
            }
        }
    };

    const showTestResult = () => {
        // Test tugagan, natijani ko'rsatish
        alert('Test vaqti tugadi! Natijangiz avtomatik saqlanadi.');
        // Natija sahifasiga o'tish
        window.location.href = `/test-result/${testResultId}`;
    };

    if (!timeInfo) {
        return <div>Vaqt yuklanmoqda...</div>;
    }

    if (isExpired) {
        return <div className="timer expired">Vaqt tugadi!</div>;
    }

    return (
        <div className="test-timer">
            <div className="timer-info">
                <h3>{timeInfo.sectionTitle}</h3>
                <p>Qolgan vaqt: {timeInfo.remainingMinutes}:{timeInfo.remainingSeconds.toString().padStart(2, '0')}</p>
            </div>
            
            <div className="timer-progress">
                <div 
                    className="progress-bar" 
                    style={{
                        width: `${((timeInfo.remainingMinutes * 60 + timeInfo.remainingSeconds) / (timeInfo.durationMinutes * 60)) * 100}%`
                    }}
                ></div>
            </div>
            
            <div className="timer-warning">
                {timeInfo.remainingMinutes < 5 && (
                    <p className="warning">Vaqt kam qoldi! Tezroq javob bering.</p>
                )}
            </div>
        </div>
    );
}
```

#### 1.3 CSS Styling
```css
.test-timer {
    position: fixed;
    top: 20px;
    right: 20px;
    background: white;
    border: 2px solid #007bff;
    border-radius: 10px;
    padding: 15px;
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    z-index: 1000;
}

.timer-info h3 {
    margin: 0 0 10px 0;
    color: #333;
    font-size: 16px;
}

.timer-info p {
    margin: 0;
    font-size: 18px;
    font-weight: bold;
    color: #007bff;
}

.timer-progress {
    margin: 10px 0;
    background: #f0f0f0;
    border-radius: 5px;
    height: 8px;
    overflow: hidden;
}

.progress-bar {
    height: 100%;
    background: linear-gradient(90deg, #28a745, #ffc107, #dc3545);
    transition: width 1s ease;
}

.timer-warning .warning {
    color: #dc3545;
    font-weight: bold;
    margin: 5px 0 0 0;
}

.timer.expired {
    background: #dc3545;
    color: white;
    border-color: #dc3545;
}
```

## 2. Test va Question'larda Bir Nechta Image'lar

### 2.1 Test Ma'lumotlarini Olish
```javascript
// Test ma'lumotlarini olish
async function getTestData(testResultId) {
    try {
        const response = await fetch(`/api/multilevel/test/?test_result_id=${testResultId}`, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        });
        
        const data = await response.json();
        
        if (response.ok) {
            return {
                testType: data.test_type,
                duration: data.duration,
                part: data.part,
                testResultId: data.test_result_id
            };
        } else {
            throw new Error(data.error);
        }
    } catch (error) {
        console.error('Test ma\'lumotlarini olishda xatolik:', error);
        throw error;
    }
}
```

### 2.2 Test Komponenti
```javascript
// React komponenti
function TestComponent({ testResultId }) {
    const [testData, setTestData] = useState(null);
    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);

    useEffect(() => {
        loadTestData();
    }, [testResultId]);

    const loadTestData = async () => {
        try {
            const data = await getTestData(testResultId);
            setTestData(data);
        } catch (error) {
            console.error('Test ma\'lumotlarini yuklashda xatolik:', error);
        }
    };

    if (!testData) {
        return <div>Test yuklanmoqda...</div>;
    }

    const currentQuestion = testData.part.questions[currentQuestionIndex];

    return (
        <div className="test-container">
            <TestTimer testResultId={testResultId} />
            
            <div className="question-container">
                <h2>Savol {currentQuestionIndex + 1}</h2>
                
                {/* Savol matni */}
                <div className="question-text">
                    <p>{currentQuestion.text}</p>
                </div>
                
                {/* Test rasmi */}
                {currentQuestion.picture && (
                    <div className="question-image">
                        <img 
                            src={currentQuestion.picture} 
                            alt="Test rasmi"
                            className="test-image"
                        />
                    </div>
                )}
                
                {/* Audio fayl */}
                {currentQuestion.audio && (
                    <div className="question-audio">
                        <audio controls>
                            <source src={currentQuestion.audio} type="audio/mpeg" />
                            Brauzeringiz audio fayllarni qo'llab-quvvatlamaydi.
                        </audio>
                    </div>
                )}
                
                {/* Test matni */}
                {currentQuestion.test_text && (
                    <div className="test-text">
                        <h3>{currentQuestion.test_text_title}</h3>
                        <div className="text-content">
                            {currentQuestion.test_text}
                        </div>
                    </div>
                )}
                
                {/* Variantlar */}
                {currentQuestion.has_options && currentQuestion.options && (
                    <div className="options-container">
                        <h3>Variantlar:</h3>
                        <div className="options-list">
                            {currentQuestion.options.map((option, index) => (
                                <div key={index} className="option-item">
                                    <input 
                                        type="radio" 
                                        name={`question_${currentQuestion.id}`}
                                        id={`option_${currentQuestion.id}_${index}`}
                                        value={option.id}
                                    />
                                    <label htmlFor={`option_${currentQuestion.id}_${index}`}>
                                        {option.text}
                                    </label>
                                </div>
                            ))}
                        </div>
                    </div>
                )}
                
                {/* Javob maydoni */}
                {!currentQuestion.has_options && (
                    <div className="answer-input">
                        <textarea 
                            placeholder="Javobingizni yozing..."
                            rows="5"
                            className="answer-textarea"
                        />
                    </div>
                )}
            </div>
            
            {/* Navigatsiya */}
            <div className="navigation">
                <button 
                    onClick={() => setCurrentQuestionIndex(prev => Math.max(0, prev - 1))}
                    disabled={currentQuestionIndex === 0}
                >
                    Oldingi
                </button>
                
                <span className="question-counter">
                    {currentQuestionIndex + 1} / {testData.part.questions.length}
                </span>
                
                <button 
                    onClick={() => setCurrentQuestionIndex(prev => Math.min(testData.part.questions.length - 1, prev + 1))}
                    disabled={currentQuestionIndex === testData.part.questions.length - 1}
                >
                    Keyingi
                </button>
                
                <button 
                    onClick={submitTest}
                    className="submit-btn"
                >
                    Testni Yakunlash
                </button>
            </div>
        </div>
    );
}
```

### 2.3 CSS Styling
```css
.test-container {
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
}

.question-container {
    background: white;
    border-radius: 10px;
    padding: 30px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    margin-bottom: 20px;
}

.question-text {
    margin-bottom: 20px;
}

.question-text p {
    font-size: 18px;
    line-height: 1.6;
    color: #333;
}

.question-image {
    margin: 20px 0;
    text-align: center;
}

.test-image {
    max-width: 100%;
    height: auto;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

.question-audio {
    margin: 20px 0;
}

.question-audio audio {
    width: 100%;
    border-radius: 8px;
}

.test-text {
    margin: 20px 0;
    padding: 20px;
    background: #f8f9fa;
    border-radius: 8px;
}

.test-text h3 {
    margin: 0 0 15px 0;
    color: #333;
}

.text-content {
    line-height: 1.6;
    color: #555;
}

.options-container {
    margin: 20px 0;
}

.options-list {
    display: flex;
    flex-direction: column;
    gap: 10px;
}

.option-item {
    display: flex;
    align-items: center;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.2s;
}

.option-item:hover {
    background-color: #f8f9fa;
}

.option-item input[type="radio"] {
    margin-right: 10px;
}

.option-item label {
    cursor: pointer;
    flex: 1;
}

.answer-input {
    margin: 20px 0;
}

.answer-textarea {
    width: 100%;
    padding: 15px;
    border: 1px solid #ddd;
    border-radius: 8px;
    font-size: 16px;
    resize: vertical;
}

.navigation {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 20px 0;
}

.navigation button {
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    background: #007bff;
    color: white;
    cursor: pointer;
    transition: background-color 0.2s;
}

.navigation button:hover:not(:disabled) {
    background: #0056b3;
}

.navigation button:disabled {
    background: #ccc;
    cursor: not-allowed;
}

.submit-btn {
    background: #28a745 !important;
}

.submit-btn:hover {
    background: #1e7e34 !important;
}

.question-counter {
    font-weight: bold;
    color: #666;
}
```

## 3. Writing Section - Ko'p Rasmli Javob

### 3.1 Writing Test Komponenti
```javascript
// React komponenti
function WritingTestComponent({ testResultId }) {
    const [questions, setQuestions] = useState([]);
    const [answers, setAnswers] = useState({});
    const [images, setImages] = useState({});

    useEffect(() => {
        loadWritingTest();
    }, [testResultId]);

    const loadWritingTest = async () => {
        try {
            const data = await getTestData(testResultId);
            setQuestions(data.part.questions);
            
            // Har bir savol uchun bo'sh javob va rasm ro'yxati
            const initialAnswers = {};
            const initialImages = {};
            
            data.part.questions.forEach(question => {
                initialAnswers[question.id] = [];
                initialImages[question.id] = [];
            });
            
            setAnswers(initialAnswers);
            setImages(initialImages);
        } catch (error) {
            console.error('Writing test yuklashda xatolik:', error);
        }
    };

    const handleImageUpload = (questionId, files) => {
        const questionImages = images[questionId] || [];
        const newImages = [];
        
        Array.from(files).forEach((file, index) => {
            if (questionImages.length + newImages.length < 3) {
                newImages.push({
                    file: file,
                    order: questionImages.length + newImages.length + 1,
                    preview: URL.createObjectURL(file)
                });
            }
        });
        
        setImages(prev => ({
            ...prev,
            [questionId]: [...questionImages, ...newImages]
        }));
    };

    const removeImage = (questionId, imageIndex) => {
        setImages(prev => {
            const questionImages = prev[questionId] || [];
            const newImages = questionImages.filter((_, index) => index !== imageIndex);
            
            // Order'larni qayta tartiblash
            newImages.forEach((image, index) => {
                image.order = index + 1;
            });
            
            return {
                ...prev,
                [questionId]: newImages
            };
        });
    };

    const submitWritingTest = async () => {
        try {
            const formData = new FormData();
            formData.append('test_result_id', testResultId);
            
            // Har bir savol uchun javoblarni qo'shish
            Object.keys(answers).forEach((questionId, questionIndex) => {
                const questionImages = images[questionId] || [];
                
                if (questionImages.length > 0) {
                    formData.append(`answers[${questionIndex}][question]`, questionId);
                    
                    questionImages.forEach((image, imageIndex) => {
                        formData.append(`answers[${questionIndex}][writing_images][${image.order}][image]`, image.file);
                        formData.append(`answers[${questionIndex}][writing_images][${image.order}][order]`, image.order);
                    });
                }
            });
            
            const response = await fetch('/api/multilevel/testcheck/writing/', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`
                },
                body: formData
            });
            
            const result = await response.json();
            
            if (response.ok) {
                alert('Writing test muvaffaqiyatli yuborildi!');
                // Natija sahifasiga o'tish
                window.location.href = `/test-result/${testResultId}`;
            } else {
                throw new Error(result.error || 'Xatolik yuz berdi');
            }
        } catch (error) {
            console.error('Writing test yuborishda xatolik:', error);
            alert(`Xatolik: ${error.message}`);
        }
    };

    return (
        <div className="writing-test-container">
            <TestTimer testResultId={testResultId} />
            
            {questions.map((question, questionIndex) => (
                <div key={question.id} className="writing-question">
                    <h2>Savol {questionIndex + 1}</h2>
                    
                    <div className="question-content">
                        <p className="question-text">{question.text}</p>
                        
                        {question.test_text && (
                            <div className="test-text">
                                <h3>{question.test_text_title}</h3>
                                <div className="text-content">{question.test_text}</div>
                            </div>
                        )}
                        
                        {question.constraints && (
                            <div className="constraints">
                                <h4>Shartlar:</h4>
                                <p>{question.constraints}</p>
                            </div>
                        )}
                    </div>
                    
                    <div className="image-upload-section">
                        <h3>Javobingizni rasmda yozing:</h3>
                        
                        <div className="image-upload-area">
                            <input
                                type="file"
                                multiple
                                accept="image/*"
                                onChange={(e) => handleImageUpload(question.id, e.target.files)}
                                disabled={(images[question.id] || []).length >= 3}
                                className="image-input"
                            />
                            
                            <div className="upload-info">
                                <p>Maksimum 3 ta rasm yuklash mumkin</p>
                                <p>Format: PNG, JPG, JPEG</p>
                                <p>Hajm: 5MB dan kam</p>
                            </div>
                        </div>
                        
                        <div className="uploaded-images">
                            {(images[question.id] || []).map((image, imageIndex) => (
                                <div key={imageIndex} className="image-item">
                                    <div className="image-preview">
                                        <img src={image.preview} alt={`Rasm ${image.order}`} />
                                        <div className="image-order">Rasm {image.order}</div>
                                    </div>
                                    
                                    <button
                                        type="button"
                                        onClick={() => removeImage(question.id, imageIndex)}
                                        className="remove-image-btn"
                                    >
                                        O'chirish
                                    </button>
                                </div>
                            ))}
                        </div>
                        
                        {(images[question.id] || []).length === 0 && (
                            <div className="no-images">
                                <p>Hech qanday rasm yuklanmagan</p>
                            </div>
                        )}
                    </div>
                </div>
            ))}
            
            <div className="submit-section">
                <button 
                    onClick={submitWritingTest}
                    className="submit-writing-btn"
                    disabled={Object.keys(images).every(questionId => (images[questionId] || []).length === 0)}
                >
                    Writing Testni Yakunlash
                </button>
            </div>
        </div>
    );
}
```

### 3.2 CSS Styling
```css
.writing-test-container {
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
}

.writing-question {
    background: white;
    border-radius: 10px;
    padding: 30px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    margin-bottom: 30px;
}

.question-content {
    margin-bottom: 30px;
}

.question-text {
    font-size: 18px;
    line-height: 1.6;
    color: #333;
    margin-bottom: 20px;
}

.test-text {
    background: #f8f9fa;
    padding: 20px;
    border-radius: 8px;
    margin: 20px 0;
}

.constraints {
    background: #fff3cd;
    border: 1px solid #ffeaa7;
    padding: 15px;
    border-radius: 8px;
    margin: 20px 0;
}

.constraints h4 {
    margin: 0 0 10px 0;
    color: #856404;
}

.image-upload-section {
    border: 2px dashed #ddd;
    border-radius: 10px;
    padding: 30px;
    text-align: center;
    transition: border-color 0.3s;
}

.image-upload-section:hover {
    border-color: #007bff;
}

.image-upload-area {
    margin-bottom: 20px;
}

.image-input {
    display: none;
}

.image-upload-area label {
    display: inline-block;
    padding: 12px 24px;
    background: #007bff;
    color: white;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.2s;
}

.image-upload-area label:hover {
    background: #0056b3;
}

.upload-info {
    margin-top: 15px;
    color: #666;
    font-size: 14px;
}

.upload-info p {
    margin: 5px 0;
}

.uploaded-images {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 20px;
    margin-top: 20px;
}

.image-item {
    border: 1px solid #ddd;
    border-radius: 8px;
    overflow: hidden;
    background: white;
}

.image-preview {
    position: relative;
}

.image-preview img {
    width: 100%;
    height: 150px;
    object-fit: cover;
}

.image-order {
    position: absolute;
    top: 10px;
    right: 10px;
    background: rgba(0,0,0,0.7);
    color: white;
    padding: 5px 10px;
    border-radius: 15px;
    font-size: 12px;
    font-weight: bold;
}

.remove-image-btn {
    width: 100%;
    padding: 10px;
    background: #dc3545;
    color: white;
    border: none;
    cursor: pointer;
    transition: background-color 0.2s;
}

.remove-image-btn:hover {
    background: #c82333;
}

.no-images {
    color: #666;
    font-style: italic;
    padding: 20px;
}

.submit-section {
    text-align: center;
    padding: 30px 0;
}

.submit-writing-btn {
    padding: 15px 30px;
    background: #28a745;
    color: white;
    border: none;
    border-radius: 8px;
    font-size: 18px;
    cursor: pointer;
    transition: background-color 0.2s;
}

.submit-writing-btn:hover:not(:disabled) {
    background: #1e7e34;
}

.submit-writing-btn:disabled {
    background: #ccc;
    cursor: not-allowed;
}
```

### 3.3 Form-Data Yuborish Misoli
```javascript
// Form-Data yuborish misoli
const submitFormData = async () => {
    const formData = new FormData();
    
    // Test result ID
    formData.append('test_result_id', '123');
    
    // Birinchi savol uchun 2 ta rasm
    formData.append('answers[0][question]', '1');
    formData.append('answers[0][writing_images][1][image]', imageFile1);
    formData.append('answers[0][writing_images][1][order]', '1');
    formData.append('answers[0][writing_images][2][image]', imageFile2);
    formData.append('answers[0][writing_images][2][order]', '2');
    
    // Ikkinchi savol uchun 1 ta rasm
    formData.append('answers[1][question]', '2');
    formData.append('answers[1][writing_images][1][image]', imageFile3);
    formData.append('answers[1][writing_images][1][order]', '1');
    
    const response = await fetch('/api/multilevel/testcheck/writing/', {
        method: 'POST',
        headers: {
            'Authorization': `Bearer ${token}`
        },
        body: formData
    });
    
    const result = await response.json();
    console.log('Natija:', result);
};
```

Bu qo'llanma sizga test time management, ko'p rasmli testlar va writing section'da ko'p rasmli javob berish tizimini to'liq ishlatish imkonini beradi! 🚀